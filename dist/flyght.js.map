{"mappings":"AAAA,MAAM,+BAAS;IACX,CAAC,MAAM,CAAA;IACP,CAAC,aAAa,GAAG,CAAC,EAAC;IACnB,CAAC,WAAW,GAAG,IAAI,CAAA;IACnB,CAAC,OAAO,GAAG,IAAI,CAAA;IACf,YAAY,MAAM,CAAE;QAChB,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,IAAI,CAAC;QACV,OAAO,gBAAgB,CAAC,cAAc,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK;QAC/E,OAAO,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI;IACzC;IAEA,KAAK,MAAM,EAAE;QACT,IAAI,CAAC,CAAC,MAAM,GAAG,OAAO,KAAK,CAAC,CAAC,GAAE,IAAI,CAAC,CAAC,aAAa,EAAC;QACnD,IAAI,CAAC,QAAQ;IACjB;IAEA,WAAU;QACN,IAAI,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS;QAC5D,IAAI,mBAAmB,IAAI,CAAC,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC;QACnG,IAAG,QAAQ,OAAO,OAAO,CAAC,CAAC,KAAI,KAAI,UAAW;YACpC,gBAAgB,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,GAAG;gBAAE,MAAM,IAAI,IAAI;gBAAE,MAAM;YAAM;QACzE;IACJ;IAEA,eAAe;QACjB,IAAM,IAAI,OAAO,IAAI,CAAC,CAAC,YAAY,CAClC,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE;YAC9C,IAAI,OAAE,IAAG,UAAE,OAAM,eAAE,YAAW,WAAE,QAAO,cAAE,WAAU,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI;YAC1F,IAAG,OAAO,eAAe,cAAc,CAAC,eAAgB,OAAO,KAAK;YAExD,IAAI,WAAY,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK;wBAAE;gBAAQ,GAAG,OAAO;YAAC;YAC3D,WAAY,AAAC,OAAO,cAAc,aAAc,WAAW,YAAY,SAAS,IAAI,EAAE;YACtF,IAAI,CAAC,aAAa,CAAC;YACnB,KAAM;QACnB,OACC,SAAS,cAAc,CAAC,6BAAO,SAAS,EAAE,SAAS,GAAG;IAGtD;IAEA,cAAc,OAAO,EAAE;QACnB,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,GAAG;IAC9D;AACJ;IAEA,2CAAe","sources":["src/index.js"],"sourcesContent":["const Flyght = class {\n    #config\n    #defaultConfig = {}\n    #hasPageList = null\n    #element = null\n    constructor(config) {\n        this.$ = document\n        this.init(config)\n        window.addEventListener(\"hashchange\", this.hashListener.bind(this), false)\n\t\twindow.onload = this.hashListener.bind(this)\n    }\n\n    init(config) {\n        this.#config = Object.merge({},this.#defaultConfig,config)\n        this.register()\n    }\n\n    register(){\n        this.#element = this.$.getElementById(this.#config.idElement)\n        let urlConfiguration = this.#config.urlConfiguration ?? {}, $links = this.$.querySelectorAll('a[data-flyght]')\n\t\tif($links) $links.forEach(($el,key,$parent) =>{\n            urlConfiguration[$el.name ?? $el.id] = { hash: $el.href, type: 'GET' }\n        })\n    }\n\n    hashListener() {\n\t\tfor ( let key in this.#hashPageList) {\n\t\t\tif (window.location.hash === this.#hashPageList[key].hash) {\n                let { url, method, beforeFetch, options, afterFetch } = this.#hasPageList[key]\n\t\t\t\tif(typeof beforeFetch == 'Function' && !beforeFetch() ) return false\n\t\t\t\t\n                let response  = this.#fetchFetch(url, { method, ...options })\n                response  = (typeof afterFetch == 'Function') ? afterFetch(response) : response.text()\n                this.updateContent(response)\n                break;\n\t\t\t} else {\n\t\t\t\tdocument.getElementById(Flyght.idElement).innerHTML = \"\";\n\t\t\t}\n\t\t}\n    }\n\n    updateContent(content) {\n        this.$.getElementById(this.#config.idElement).innerHTML = content\n    }\n}\n\nexport default Flyght"],"names":[],"version":3,"file":"flyght.js.map","sourceRoot":"../"}